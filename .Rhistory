sep="\t",
append=TRUE,
col.names=FALSE)
print(cluster.ci.features)
#   ci.max <- max(cluster.ci)
#   print("pcc.in.mean:")
#   print(pcc.in.mean)
#   print("pcc.out.mean:")
#   print(pcc.out.mean)
#   library(fpc)
#   plotcluster(cor.table, kmeans_result$cluster) # 生成聚类图
}
#divide.files.by.periods()
#sd.test()
max.ci.file.name <- paste(BASE.PATH,"max_ci_features.txt")
if(file.exists(max.ci.file.name)){
file.remove(max.ci.file.name)
}
for(i in 1:PERIOD.COUNT){
#4wk,8wk,12wk,16wk,20wk
period.name <- paste("matrix_table_",i*4,"wk",sep="")
calc.pcc(period.name)
pcc.test(period.name)
}
}
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
cluster
cor.table
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
a <-c(1:10)
a
b <-c(5:12)
b
a-b
source('~/GraphDataMining/gdm.R', echo=TRUE)
example(interseect)
example(intersect)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
View(max.ci.matrix)
max.ci.matrix$cluster.vector
max.ci.matrix$cluster.vector[1]
max.ci.matrix$cluster.vector[2]
strsplit(max.ci.matrix[1,3],",")
max.ci.matrix[1,3]
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
max.ci.matrix[1,3]
max.ci.matrix[,3]
class(max.ci.matrix[1,3]0
class(max.ci.matrix[1,3])
str(max.ci.matrix[1,3])
str(max.ci.matrix[,3])
unlist(max.ci.matrix[,3]))
unlist(max.ci.matrix[,3])
max.ci.matrix$cluster.vector
max.ci.matrix$cluster.vector[1]
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
View(max.ci.matrix)
max.ci.matrix[1,3]
status <- c("POOR","IMP","EX")
str(status)
status <- factor(status)
str(status)
status
status[1]
status[2]
status[2][1]
s <- as.character(status)
as.character(max.ci.matrix[1,3])
strsplit(as.character(max.ci.matrix[1,3]),",")
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
View(example.dnb.t1)
View(dnb)
common.features
View(example.dnb.t1)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
common.features
View(example.dnb.t1)
class(example.dnb.t1)
m <- as.vector(example.dnb.t1)
m
class(m)
m<-m[1]
m
class(m)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
rownames(example.dnb.t1)
example.dnb.t1
example.dnb.t1
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
example.dnb.t1
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
example.dnb.t1
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
example.dnb.t1
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
example.dnb.t1
t(example.dnb.t1))
t(example.dnb.t1)
t(example.dnb.t1)[1]
t(example.dnb.t1)[1,]
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
example.dnb.t1
example.dnb.t4
dnb
common.features
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
dnb
source('~/.active-rstudio-document', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
system.time()
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
Sys.time()
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
Sys.time()
x <- SYs.time()
x <- Sss.time()
x <- Sys.time()
y <-Sys.time()
x-y
y-x
str(y-x)
as.character(y-x)
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
example.dnb.t1
example.dnb.t1[,1]
source('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
example.dnb.t4
dnb
source('~/GraphDataMining/gdm.R', echo=TRUE)
abs(-1)
abs(c(-1,-7,9))
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
x <- rbind(matrix(rnorm(100, sd = 0.3), ncol = 2),
matrix(rnorm(100, mean = 1, sd = 0.3), ncol = 2))
colnames(x) <- c("x", "y")
View(x)
(cl <- kmeans(x, 2))
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
kmeans.result
kmeans
View(cor.table)
debugSource('~/GraphDataMining/temp_bk.R')
z1
head(z1)
tail(z1)
write.table(z1,"z.txt",sep="\t")
write.table(as.matrix(z1),"z.txt",sep="\t")
data=iris[,-5]
dist.e=dist(data,method='euclidean')
heatmap(as.matrix(dist.e),labRow = F, labCol = F)
model1=hclust(dist.e,method='ward')
result=cutree(model1,k=3)
result
source('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
cluster
head(cluster)
cluster
cluster.index
name(cluster.index)
is.name(cluster.index)
cor.table <- read.table(paste(BASE.PATH,file.name,"_cor_matrix.txt",sep=""),
header=TRUE,sep="")
names(cor.table) <- row.names(cor.table)
cor.table <- 1-abs(cor.table)
cor.table <- read.table(paste(BASE.PATH,"matrix_table_4wk_cor_matrix.txt",sep=""),
header=TRUE,sep="")
names(cor.table) <- row.names(cor.table)
cor.table <- 1-abs(cor.table)
m <- as.dist(cor.table)
m
head(m)
write.table(as.matrix(m),"z.txt",sep="\t")
source('~/GraphDataMining/temp_bk.R', echo=TRUE)
source('~/GraphDataMining/temp_bk.R', echo=TRUE)
source('~/GraphDataMining/temp_bk.R', echo=TRUE)
source('~/GraphDataMining/temp_bk.R', echo=TRUE)
source('~/GraphDataMining/temp_bk.R')
View(cor.table)
m1 <- dist(cor.table)
source('~/GraphDataMining/temp_bk.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
cluster
cor.table <- abs(cor.table)
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
rep(50, 10)
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
a <- 1:6
b<-c(1,2,2,3,1,3)
c<- cbind(a,b)
c
m <- ddply(c,.(b),summrize,model = paste(a,collapse=","))
library(plyr)
m <- ddply(c,.(b),summrize,model = paste(a,collapse=","))
debugSource('~/GraphDataMining/temp_bk.R', echo=TRUE)
source('~/GraphDataMining/temp_bk.R', echo=TRUE)
source('~/GraphDataMining/temp_bk.R', echo=TRUE)
source('~/GraphDataMining/temp_bk.R', echo=TRUE)
View(c)
source('~/GraphDataMining/temp_bk.R', echo=TRUE)
source('~/GraphDataMining/temp_bk.R', echo=TRUE)
ddply
source('~/GraphDataMining/temp_bk.R', echo=TRUE)
source('~/GraphDataMining/temp_bk.R', echo=TRUE)
source('~/GraphDataMining/temp_bk.R', echo=TRUE)
s <- 1:6
size(s)
length(s)
m <- matrix(1:16,4,4)
View(m)
m[!upper.tri(m)] <- NA
m
mean(m)
mean(m,na.rm=TRUE)
m[is.na(m)]
m[!is.na(m)]
!is.na(m)
pcc.out <- numeric()
pcc.out <- append(c(1,2))
pcc.out <- append(pcc.out,c(1,2))
pcc.out <- append(pcc.out,c(1,3))
pcc.out <- append(pcc.out,null)
pcc.out <- append(pcc.out,NULL)
c()
cluster.vector <- vector()
a <- vector()
b<-vector()
a[1] = 2
a[2] = 0
b[3] =4
cluster.vector[1] = a
cluster.vector[2] = b
a <- c(1,4,6,3,NA)
order(a)
a[order(a)]
a[order(-a)]
is.na(NA)
is.nan(NA)
c(1,2)*c(4,5)/c(2,6)
x <- c(1,2)*c(4,5)/c(2,6)
x
a <-c(6,7,8)
max(a)
which(max(a))
max
which(a = max(a))
which.max(a)
write.table(3,
paste(BASE.PATH,"max_ci_",i*4,"wk.txt"),
row.names=FALSE,
sep="\t",
append=TRUE,
col.names=FALSE)
BASE.PATH <- "/host/data/"
write.table(3,
paste(BASE.PATH,"max_ci_",i*4,"wk.txt"),
row.names=FALSE,
sep="\t",
append=TRUE,
col.names=FALSE)
i=1
write.table(3,
paste(BASE.PATH,"max_ci_",i*4,"wk.txt"),
row.names=FALSE,
sep="\t",
append=TRUE,
col.names=FALSE)
clear
clear()
debugSource('~/GraphDataMining/temp_bk.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/temp_bk.R', echo=TRUE)
debugSource('~/GraphDataMining/temp_bk.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/temp_bk.R', echo=TRUE)
View(cor.table)
cur.model <- unlist(strsplit(as.character(models[cluster.index]),","))
cur.model <- as.integer(cur.model)
debugSource('~/GraphDataMining/temp_bk.R', echo=TRUE)
debugSource('~/GraphDataMining/temp_bk.R', echo=TRUE)
debugSource('~/GraphDataMining/temp_bk.R', echo=TRUE)
pcc.in.mean
pcc.in.mean[1]
mean(pcc.in,na.rm=TRUE)
pcc.in
x <- c(0:10, 50)
xm <- mean(x)
c(xm, mean(x, trim = 0.10)
)
mean(pcc.in[!is.na(pcc.in)])
pcc.in[!is.na(pcc.in)]
type(pcc.in)
class(pcc.in)
unlist(pcc.in)
mean(unlist(pcc.in),na.rm=TRUE)
mean(unlist(pcc.in[!is.na(pcc.in)]))
pcc.out <- pcc.out[order(-pcc.out)]
pcc.out <- unlist(pcc.out)
pcc.out <- pcc.out[order(-pcc.out)]
pcc.out
debugSource('~/GraphDataMining/temp_bk.R', echo=TRUE)
df.aggr.by.cluster$sd.mean
View(df.with.cluster.genes.sds)
View(df.aggr.by.cluster)
debugSource('~/GraphDataMining/temp_bk.R', echo=TRUE)
df.aggr.by.cluster$sd
pcc.out.mean
ci
which.max(ci)
models
max.model <- genes[unlist(strsplit(as.character(models[which.max(ci)]),","))]
write.table(max.model,
paste(BASE.PATH,"dnb_",i*4,"wk.txt"),
row.names=FALSE,
sep="\t",
append=TRUE,
col.names=FALSE)
genes
unlist(strsplit(as.character(models[which.max(ci)]),","))
max.model <- genes[as.integer(unlist(strsplit(as.character(models[which.max(ci)]),",")))]
write.table(max.model,
paste(BASE.PATH,"dnb_",i*4,"wk.txt"),
row.names=FALSE,
sep="\t",
append=TRUE,
col.names=FALSE)
ci
ci.max
write.table(ci.max,
paste(BASE.PATH,"max_ci_",i*4,"wk.txt"),
row.names=FALSE,
sep="\t",
append=TRUE,
col.names=FALSE)
a <- matrix(1:12,3,4)
a
a(:)
as.vector(a)
setwd(BASE.PATH)
png("ci.png")
plot(c(1:PERIOD.COUNT)*4,ci)
dev.off()
install.packages("gputools")
icount(10)
library(gputools)
library("gputools")
install.packages("gputools")
install.packages("~/下载/gputools_0.28.tar.gz", repos = NULL, type = "source")
library(foreach)
library(doParallel)
library(plyr)
library(foreach)
library(doParallel)
# BASE.PATH <- "/host/data/"
BASE.PATH <- "~/gdm/"
FILE.NAME <- "liver_labeled_data.txt"
PERIOD.SAMPLE.COUNT <- 10 #each period has 10 samples
PERIOD.COUNT <- 5 #we have 5 periods:4wk,8wk,12wk,16wk,20wk
FEATURES.FILTERED.BY.SD <- 1000
FEATURES.SD.THRESHOLD <- 0.05
CLUSTER.AMOUNT <-3
CLUSTER.HCLUST.H <- 0.75
PCC.OUT.AMOUNT <- 50
registerDoParallel(cores=2)
z <- c((1-PERIOD.SAMPLE.COUNT):1)
foreach(i = 1:PERIOD.COUNT) %dopar% {
z <- z+PERIOD.SAMPLE.COUNT
z[1]<-1
print(z)
}
foreach(i = 1:PERIOD.COUNT) %dopar% {
z <- z+PERIOD.SAMPLE.COUNT*i
z[1]<-1
print(z)
}
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm4Par.R', echo=TRUE)
a <- matrix(1:12,3,4)
a
diag(a)<-0
a
a <- matrix(1:9,3,3)
diag(a)
diag(a)<-0
a
install.packages("gdm")
install.packages("gbm")
library(gbm)
a<-2:8
a[c(1,5,3)]
source('~/GraphDataMining/gdm4Par.R', echo=TRUE)
source('~/GraphDataMining/gdm4Par.R', echo=TRUE)
source('~/GraphDataMining/gdm4Par.R', echo=TRUE)
source('~/GraphDataMining/gdm4Par.R', echo=TRUE)
plot.ci()
compare.to.example()
plot.ci <- function(){
ci <- numeric()
periods <-1:PERIOD.COUNT
for(i in periods){
#4wk,8wk,12wk,16wk,20wk
period.name <- paste("matrix_table_",i*4,"wk_max_ci.txt",sep="")
ci[i] <- read.table(paste(BASE.PATH,period.name,sep=""))
}
setwd(BASE.PATH)
png("ci.png")
plot(periods,unlist(ci),
xlab="period (*4 wk)",
ylab="ci",
main="ci growth",
type="b")
dev.off()
}
compare.to.example <- function(){
example.dnb.t1 <-read.table(paste(BASE.PATH,"liver_DNB_t1.txt",sep=""))[,1]
example.dnb.t4 <-read.table(paste(BASE.PATH,"liver_DNB_t4.txt",sep=""))[,1]
dnb.4wk <-read.table(paste(BASE.PATH,"matrix_table_4wk_dnb.txt",sep=""))[,1]
dnb.16wk <-read.table(paste(BASE.PATH,"matrix_table_16wk_dnb.txt",sep=""))[,1]
#find common features
common.features.t1 <- intersect(example.dnb.t1,dnb.4wk)
write.table(common.features.t1,paste(BASE.PATH,"common_4wk_dnb.txt",sep=""),sep="\n",
col.names=FALSE,row.names=FALSE)
common.features.t4 <- intersect(example.dnb.t4,dnb.16wk)
write.table(common.features.t4,paste(BASE.PATH,"common_16wk_dnb.txt",sep=""),sep="\n",
col.names=FALSE,row.names=FALSE)
}
plot.ci()
compare.to.example()
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
pcc.out
pcc.in
pcc.in[order(-pcc.in)]
a <-1:12
a[1:14]
cl <- makePSOCKcluster(2)
registerDoParallel(cl)
m <- matrix(rnorm(9), 3, 3)
foreach(i=1:nrow(m), .combine=rbind)
stopCluster(cl)
cl <- makePSOCKcluster(2)
registerDoParallel(cl)
m <- matrix(rnorm(9), 3, 3)
a <-foreach(i=1:nrow(m), .combine=rbind)
a
a <-foreach(i=1:nrow(m), .combine=rbind) %dopar% i^2
a
class(a)
a <-foreach(i=1:nrow(m), .combine=rbind) %dopar% {i^2
i^3}
a
a[,1]
a <-foreach(i=1:nrow(m), .combine=cbind) %dopar% {i^2
}
a
a <-foreach(i=1:nrow(m), .combine=cbind) %dopar% {rbind(i^2,i^3,i^4)}
a
c(1,7:11,17:21)
a <-1:5
which(a>3)
a<-2:6
which(a>3)
cbind(1:7, diag(3))
cbind(1:7, diag(14))
z <- list(a = 1, b = "c", c = 1:3)
z
names(z)[3] <- "c2"
z
1:10 %in% c(1,3,5,9)
match(1:10,c(1,3,5,9))
match(1:5,c(1,3,5,9))
install.packages("fitdistrplus")
install.packages("fitdistrplus")
debugSource('~/GraphDataMining/gdm4Par.R', echo=TRUE)
structure(1:6, dim = 2:3)
structure(1:36, dim = 2:3:6)
structure(1:24, dim = 2:4)
y <- data.frame(a = 1, b = "a)
y <- data.frame(a = 1, b = "a")
dput(y.y.R)
dput(y,y.R)
dput(y,"y.R")
new.y <- dget("y.R")
new.y
