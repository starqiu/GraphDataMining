source('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
class(sds)
c(as.vector(cluster),pcc.in.mean,pcc.out.mean,sds)
cbind(as.vector(cluster),pcc.in.mean,pcc.out.mean,sds)
cbind(cluster,pcc.in.mean,pcc.out.mean,sds)
cluster
debugSource('~/GraphDataMining/gdm.R')
debugSource('~/GraphDataMining/gdm.R')
debugSource('~/GraphDataMining/gdm.R')
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
cluster.pccin.pccout.sd
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
cluster.pccin.pccout.sd
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
2*3
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
cluster.ci
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
cluster.ci
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
x
x[pccin]*x[sd]/x[pccout]
x[pccin]*x[sd]
x[pccin]
x[sd]
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
cluster.ci
ci.max <- max(cluster.ci)
ci.max
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
Q
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
cluster.vector
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
FEATURES.FILTERED.BY.SD <- 9
matrix.table <- read.table(paste(BASE.PATH,FILE.NAME,sep=""),
header=TRUE,sep="")
library(plyr)
BASE.PATH <- "/host/data/"
FILE.NAME <- "liver_labeled_data.txt"
PERIOD.SAMPLE.COUNT <- 10 #each period has 10 samples
PERIOD.COUNT <- 5 #we have 5 periods
FEATURES.FILTERED.BY.SD <- 9
CLUSTER.AMOUNT <-3
matrix.table <- read.table(paste(BASE.PATH,FILE.NAME,sep=""),
header=TRUE,sep="")
divide.files.by.periods <- function(){
period.name <- ""
z <- c((1-PERIOD.SAMPLE.COUNT):1)
for(i in 1:PERIOD.COUNT){
z <- z+PERIOD.SAMPLE.COUNT
z[1]<-1
#4wk,8wk,12wk,16wk,20wk
period.name <- paste("matrix_table_",i*4,"wk.txt",sep="")
write.table(matrix.table[z],file=paste(BASE.PATH,period.name,sep=""),
row.names = FALSE,
sep="\t")
}
}
calc.and.filter.sd <- function(file.name,features.filered.by.sd=1000){
period.matrix.table <- read.table(paste(BASE.PATH,file.name,".txt",sep=""),
header=TRUE,sep="")
z <- c(2:(PERIOD.SAMPLE.COUNT+1))
exam_names <-names(period.matrix.table)[z]
#mean <- apply(period.matrix.table[z],1,mean)
sd <- apply(period.matrix.table[z],1,sd)
#mean.sd <- data.frame(mean=mean,sd=sd)
table.with.sd <- cbind(period.matrix.table,sd)
write.table(table.with.sd,
paste(BASE.PATH,file.name,"_with_sd.txt",sep=""),
row.names=FALSE,
sep="\t")
table.sorted.by.sd <-table.with.sd[order(-table.with.sd$sd),]
table.sorted.by.sd <- table.sorted.by.sd[c(1:features.filered.by.sd),]
write.table(table.sorted.by.sd,
paste(BASE.PATH,file.name,"_with_high_sd.txt",sep=""),
row.names=FALSE,
sep="\t")
}
sd.test <- function(table.with.sd){
for(i in 1:PERIOD.COUNT){
#4wk,8wk,12wk,16wk,20wk
period.name <- paste("matrix_table_",i*4,"wk",sep="")
calc.and.filter.sd(file.name=period.name,
features.filered.by.sd=FEATURES.FILTERED.BY.SD)
}
}
calc.pcc <- function(file.name){
filtered.table <- read.table(paste(BASE.PATH,file.name,"_with_high_sd.txt",sep=""),
header=TRUE,sep="")
geneIds <- filtered.table[,1] #as the row names and column names of matrix
filtered.table <- filtered.table[,c(2:(PERIOD.SAMPLE.COUNT+1))]
trans.matrix <- t(filtered.table) #matrix Transpose
cor.matrix <- 1-cor(trans.matrix)
rownames(cor.matrix) <- geneIds
colnames(cor.matrix) <- geneIds
write.table(cor.matrix,
paste(BASE.PATH,file.name,"_cor_matrix.txt",sep=""),
row.names=TRUE,
sep="\t")
#print(trans.matrix)
#print(cor.matrix)
}
calc.ci <- function(x,pccin,pccout,sd){
x[pccin]*x[sd]/x[pccout]
}
pcc.test <- function(file.name){
cor.table <- read.table(paste(BASE.PATH,file.name,"_cor_matrix.txt",sep=""),
header=TRUE,sep="")
names(cor.table) <- row.names(cor.table)
#print(cor.table)
set.seed(252964) # 设置随机值，为了得到一致结果。
kmeans_result <- kmeans(cor.table,CLUSTER.AMOUNT)
#print(kmeans_result)
#print(kmeans_result$cluster)
sds <- read.table(paste(BASE.PATH,file.name,"_with_high_sd.txt",sep=""),
header=TRUE,
sep="")[PERIOD.SAMPLE.COUNT+2]
#print(sds)
#calc pcc.in and pcc.out
cluster.index <-0
pcc.in.mean <- numeric()
pcc.out.mean <- numeric()
cluster <- kmeans_result$cluster
cluster.vector <- vector()
for (i in 1:FEATURES.FILTERED.BY.SD){
cluster.index <- cluster[i]
if(is.na(cluster.vector[cluster.index])){
cluster.vector[cluster.index] <- row.names(cor.table)[i]
}else{
cluster.vector[cluster.index] <- paste(cluster.vector[cluster.index],
row.names(cor.table)[i],
sep=",")
}
pccs <- abs(1-cor.table[,i])
pcc.in <- numeric()
pcc.out <- numeric()
for (j in 1:FEATURES.FILTERED.BY.SD){
if(i != j & cluster.index == cluster[j]){
pcc.in <- append(pcc.in,pccs[j])
}
else if(i != j & cluster.index != cluster[j]){
pcc.out <- append(pcc.out,pccs[j])
}
}
pcc.in.mean[i] <- mean(pcc.in,na.rm=TRUE)
if(is.nan(pcc.in.mean[i])){
pcc.in.mean[i] <- 0
}
pcc.out.mean[i] <- mean(pcc.out,na.rm=TRUE)
}
#   print(cluster.vector)
cluster.pccin.pccout.sd <- cbind(cluster,pcc.in.mean,pcc.out.mean,sds)
#   print(cluster.pccin.pccout.sd)
cluster.pccin.pccout.sd.mean <-ddply(cluster.pccin.pccout.sd,.(cluster),
summarize,
in.mean=mean(pcc.in.mean),
out.mean=mean(pcc.out.mean),
sd.mean=mean(sd))
#   print(cluster.pccin.pccout.sd.mean)
cluster.ci <- apply(cluster.pccin.pccout.sd.mean,
1,
calc.ci,
pccin="in.mean",
pccout="out.mean",
sd="sd.mean")
#   print(cluster.pccin.pccout.sd.mean[1])
cluster.ci.features <- data.frame(cluster.pccin.pccout.sd.mean[1],cluster.ci,cluster.vector)
#   print(cluster.ci.features)
#  order by ci
cluster.ci.features <- cluster.ci.features[order(-cluster.ci.features$cluster.ci),]
write.table(cluster.ci.features[1,],
paste(BASE.PATH,"max_ci_features.txt"),
row.names=FALSE,
sep="\t",
append=TRUE,
col.names=FALSE)
print(cluster.ci.features)
#   ci.max <- max(cluster.ci)
#   print("pcc.in.mean:")
#   print(pcc.in.mean)
#   print("pcc.out.mean:")
#   print(pcc.out.mean)
#   library(fpc)
#   plotcluster(cor.table, kmeans_result$cluster) # 生成聚类图
}
#divide.files.by.periods()
#sd.test()
max.ci.file.name <- paste(BASE.PATH,"max_ci_features.txt")
if(file.exists(max.ci.file.name)){
file.remove(max.ci.file.name)
}
for(i in 1:PERIOD.COUNT){
#4wk,8wk,12wk,16wk,20wk
period.name <- paste("matrix_table_",i*4,"wk",sep="")
calc.pcc(period.name)
pcc.test(period.name)
}
}
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
cluster
cor.table
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
a <-c(1:10)
a
b <-c(5:12)
b
a-b
source('~/GraphDataMining/gdm.R', echo=TRUE)
example(interseect)
example(intersect)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
View(max.ci.matrix)
max.ci.matrix$cluster.vector
max.ci.matrix$cluster.vector[1]
max.ci.matrix$cluster.vector[2]
strsplit(max.ci.matrix[1,3],",")
max.ci.matrix[1,3]
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
max.ci.matrix[1,3]
max.ci.matrix[,3]
class(max.ci.matrix[1,3]0
class(max.ci.matrix[1,3])
str(max.ci.matrix[1,3])
str(max.ci.matrix[,3])
unlist(max.ci.matrix[,3]))
unlist(max.ci.matrix[,3])
max.ci.matrix$cluster.vector
max.ci.matrix$cluster.vector[1]
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
View(max.ci.matrix)
max.ci.matrix[1,3]
status <- c("POOR","IMP","EX")
str(status)
status <- factor(status)
str(status)
status
status[1]
status[2]
status[2][1]
s <- as.character(status)
as.character(max.ci.matrix[1,3])
strsplit(as.character(max.ci.matrix[1,3]),",")
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
View(example.dnb.t1)
View(dnb)
common.features
View(example.dnb.t1)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
common.features
View(example.dnb.t1)
class(example.dnb.t1)
m <- as.vector(example.dnb.t1)
m
class(m)
m<-m[1]
m
class(m)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
rownames(example.dnb.t1)
example.dnb.t1
example.dnb.t1
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
example.dnb.t1
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
example.dnb.t1
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
example.dnb.t1
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
example.dnb.t1
t(example.dnb.t1))
t(example.dnb.t1)
t(example.dnb.t1)[1]
t(example.dnb.t1)[1,]
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
example.dnb.t1
example.dnb.t4
dnb
common.features
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
dnb
source('~/.active-rstudio-document', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
system.time()
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
Sys.time()
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
Sys.time()
x <- SYs.time()
x <- Sss.time()
x <- Sys.time()
y <-Sys.time()
x-y
y-x
str(y-x)
as.character(y-x)
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
example.dnb.t1
example.dnb.t1[,1]
source('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
example.dnb.t4
dnb
source('~/GraphDataMining/gdm.R', echo=TRUE)
abs(-1)
abs(c(-1,-7,9))
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
x <- rbind(matrix(rnorm(100, sd = 0.3), ncol = 2),
matrix(rnorm(100, mean = 1, sd = 0.3), ncol = 2))
colnames(x) <- c("x", "y")
View(x)
(cl <- kmeans(x, 2))
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
kmeans.result
kmeans
View(cor.table)
debugSource('~/GraphDataMining/temp_bk.R')
z1
head(z1)
tail(z1)
write.table(z1,"z.txt",sep="\t")
write.table(as.matrix(z1),"z.txt",sep="\t")
data=iris[,-5]
dist.e=dist(data,method='euclidean')
heatmap(as.matrix(dist.e),labRow = F, labCol = F)
model1=hclust(dist.e,method='ward')
result=cutree(model1,k=3)
result
source('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
cluster
head(cluster)
cluster
cluster.index
name(cluster.index)
is.name(cluster.index)
cor.table <- read.table(paste(BASE.PATH,file.name,"_cor_matrix.txt",sep=""),
header=TRUE,sep="")
names(cor.table) <- row.names(cor.table)
cor.table <- 1-abs(cor.table)
cor.table <- read.table(paste(BASE.PATH,"matrix_table_4wk_cor_matrix.txt",sep=""),
header=TRUE,sep="")
names(cor.table) <- row.names(cor.table)
cor.table <- 1-abs(cor.table)
m <- as.dist(cor.table)
m
head(m)
write.table(as.matrix(m),"z.txt",sep="\t")
source('~/GraphDataMining/temp_bk.R', echo=TRUE)
source('~/GraphDataMining/temp_bk.R', echo=TRUE)
source('~/GraphDataMining/temp_bk.R', echo=TRUE)
source('~/GraphDataMining/temp_bk.R', echo=TRUE)
source('~/GraphDataMining/temp_bk.R')
View(cor.table)
m1 <- dist(cor.table)
source('~/GraphDataMining/temp_bk.R', echo=TRUE)
debugSource('~/GraphDataMining/gdm.R', echo=TRUE)
cluster
cor.table <- abs(cor.table)
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
rep(50, 10)
source('~/GraphDataMining/gdm.R', echo=TRUE)
source('~/GraphDataMining/gdm.R', echo=TRUE)
